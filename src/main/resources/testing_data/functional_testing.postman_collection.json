{
	"info": {
		"_postman_id": "71b9fa3c-f3e4-49cf-9b56-fd55f48c4c37",
		"name": "order api functional testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "http://localhost:8080/api/v1/orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cd1a774d-9548-4578-8b66-67c2d9f9643c",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Test orders count\", function () {",
							"    let orders = pm.response.json().content;",
							"    pm.expect(orders.length).to.eql(5);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/v1/orders/customer/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"orders",
						"customer",
						"1"
					]
				},
				"description": "Get all orders"
			},
			"response": []
		},
		{
			"name": "http://localhost:8080/api/v1/orders/1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ba39299f-cadf-4fa0-8186-94135a97290c",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let orderData = pm.response.json();",
							"",
							"pm.test(\"Test fields count\", function () {",
							"    pm.expect(Object.keys(orderData).length).to.eql(11);",
							"    pm.expect(Object.keys(orderData.address).length).to.eql(5);",
							"    pm.expect(Object.keys(orderData.orderParts[0]).length).to.eql(5);",
							"});",
							"",
							"pm.test(\"Test order data\", function () {",
							"    pm.expect(orderData.id).to.eql(1);",
							"    pm.expect(orderData.number).to.eql('AX1');",
							"    pm.expect(orderData.statusId).to.eql(0);",
							"    pm.expect(orderData.paymentId).to.eql(1);",
							"    pm.expect(orderData.amount).to.eql(200);",
							"    pm.expect(orderData.discountAmount).to.eql(0);",
							"    pm.expect(orderData.address.city).to.eql('Berlin');",
							"    pm.expect(orderData.address.zip).to.eql('10115');",
							"    pm.expect(orderData.address.street).to.eql('Chausseestr.');",
							"    pm.expect(orderData.address.nr).to.eql('1');",
							"    pm.expect(orderData.orderParts.length).to.eql(2);",
							"    pm.expect(orderData.orderParts[0].itemId).to.eql(34);",
							"    pm.expect(orderData.orderParts[0].itemName).to.eql('Pizza Nutella');",
							"    pm.expect(orderData.orderParts[0].count).to.eql(1);",
							"    pm.expect(orderData.orderParts[0].price).to.eql(1200);",
							"    pm.expect(orderData.orderParts[1].itemId).to.eql(15);",
							"    pm.expect(orderData.orderParts[1].itemName).to.eql('Fanta');",
							"    pm.expect(orderData.orderParts[1].count).to.eql(2);",
							"    pm.expect(orderData.orderParts[1].price).to.eql(150);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/v1/orders/order/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"orders",
						"order",
						"1"
					]
				},
				"description": "Get a single order"
			},
			"response": []
		},
		{
			"name": "http://localhost:8080/api/v1/orders/12",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ba39299f-cadf-4fa0-8186-94135a97290c",
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Body contains exception string\", function () {",
							"    pm.expect(pm.response.json().errors[0]).to.include(\"com.alexvait.orderapi.exception.NotFoundException\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/v1/orders/order/12",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"orders",
						"order",
						"12"
					]
				},
				"description": "Order not found"
			},
			"response": []
		},
		{
			"name": "http://localhost:8080/api/v1/orders/a",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5692d064-c248-4d9f-a998-6f7787ab1e2f",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Body contains exception string\", function () {",
							"    pm.expect(pm.response.json().errors[0]).to.include(\"java.lang.NumberFormatException: For input string\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/v1/orders/order/a",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"orders",
						"order",
						"a"
					]
				},
				"description": "Get order with string as id"
			},
			"response": []
		},
		{
			"name": "http://localhost:8080/api/v1/orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d0b80065-43b5-4e85-a4d3-c27278b7bc09",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"let orderData = pm.response.json();",
							"",
							"pm.test(\"Test count of fields in objects\", function () {",
							"    pm.expect(Object.keys(orderData).length).to.eql(11);",
							"    pm.expect(Object.keys(orderData.address).length).to.eql(5);",
							"    pm.expect(Object.keys(orderData.orderParts[0]).length).to.eql(5);",
							"});",
							"",
							"pm.test(\"Test order data\", function () {",
							"    pm.expect(orderData.id).to.eql(6);",
							"    pm.expect(orderData.statusId).to.eql(0);",
							"    pm.expect(orderData.paymentId).to.eql(1);",
							"    pm.expect(orderData.amount).to.eql(1200);",
							"    pm.expect(orderData.discountAmount).to.eql(0);",
							"    pm.expect(orderData.address.city).to.eql('Berlin');",
							"    pm.expect(orderData.address.zip).to.eql('142');",
							"    pm.expect(orderData.address.street).to.eql('Chausseestr.');",
							"    pm.expect(orderData.address.nr).to.eql('1');",
							"    pm.expect(orderData.orderParts.length).to.eql(2);",
							"    pm.expect(orderData.orderParts[0].itemId).to.eql(3);",
							"    pm.expect(orderData.orderParts[0].itemName).to.eql('Pizza');",
							"    pm.expect(orderData.orderParts[0].count).to.eql(1);",
							"    pm.expect(orderData.orderParts[0].price).to.eql(1000);",
							"    pm.expect(orderData.orderParts[1].itemId).to.eql(4);",
							"    pm.expect(orderData.orderParts[1].itemName).to.eql('Fanta');",
							"    pm.expect(orderData.orderParts[1].count).to.eql(1);",
							"    pm.expect(orderData.orderParts[1].price).to.eql(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"paymentId\":1,\n    \"customerId\":1,\n    \"retailerId\":1,\n    \"amount\":1200,\n    \"discountAmount\":0,\n    \"address\" : {\n        \"zip\":\"142\",\n        \"city\":\"Berlin\",\n        \"street\":\"Chausseestr.\",\n        \"nr\":\"1\"\n    },\n    \"orderParts\":[\n        {\n            \"itemId\":3,\n            \"itemName\":\"Pizza\",\n            \"count\":1,\n            \"price\":1000\n        },\n        {\n            \"itemId\":4,\n            \"itemName\":\"Fanta\",\n            \"count\":1,\n            \"price\":200\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/v1/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"orders"
					]
				},
				"description": "Create an order"
			},
			"response": []
		},
		{
			"name": "http://localhost:8080/api/v1/orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d0b80065-43b5-4e85-a4d3-c27278b7bc09",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Missing parameters described\", function () {",
							"    pm.expect(pm.response.json().errors).to.include(\"Amount is mandatory\");",
							"    pm.expect(pm.response.json().errors).to.include(\"Payment id is mandatory\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"discountAmount\":0,\n    \"address\" : {\n        \"zip\":\"142\",\n        \"city\":\"Berlin\",\n        \"street\":\"Chausseestr.\",\n        \"nr\":\"1\"\n    },\n    \"orderParts\":[\n        {\n            \"itemId\":3,\n            \"itemName\":\"Pizza\",\n            \"count\":1,\n            \"price\":1000\n        },\n        {\n            \"itemId\":4,\n            \"itemName\":\"Fanta\",\n            \"count\":1,\n            \"price\":200\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/v1/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"orders"
					]
				},
				"description": "Create order with one missing field"
			},
			"response": []
		},
		{
			"name": "http://localhost:8080/api/v1/orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e5aa780a-c8bd-400b-919a-bf2219d2282f",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Missing parameters described\", function () {",
							"    pm.expect(pm.response.json().errors).to.include(\"Amount is mandatory\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"paymentId\":0,     \n    \"discountAmount\":0,\n    \"address\" : {\n        \"zip\":\"142\",\n        \"city\":\"Berlin\",\n        \"street\":\"Chausseestr.\",\n        \"nr\":\"1\"\n    },\n    \"orderParts\":[\n        {\n            \"itemId\":3,\n            \"itemName\":\"Pizza\",\n            \"count\":1,\n            \"price\":1000\n        },\n        {\n            \"itemId\":4,\n            \"itemName\":\"Fanta\",\n            \"count\":1,\n            \"price\":200\n        }\n    ]\n}"
				},
				"url": {
					"raw": "http://localhost:8080/api/v1/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"orders"
					]
				},
				"description": "Create order with one missing field\n"
			},
			"response": []
		},
		{
			"name": "http://localhost:8080/api/v1/orders/1/actions/fake",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1fd8508c-5513-4ae6-9c58-868588c1b3d5",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Test order status changed\", function () {",
							"    pm.expect(pm.response.json().statusId).to.eql(-2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/v1/orders/1/actions/fake",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"orders",
						"1",
						"actions",
						"fake"
					]
				},
				"description": "Update an order"
			},
			"response": []
		},
		{
			"name": "http://localhost:8080/api/v1/orders/1/actions/random",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1fd8508c-5513-4ae6-9c58-868588c1b3d5",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Body contains exception string\", function () {",
							"    pm.expect(pm.response.json().errors).to.include(\"com.alexvait.orderapi.exception.IllegalOrderStatusException: Illegal order action: random\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/v1/orders/1/actions/random",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"orders",
						"1",
						"actions",
						"random"
					]
				},
				"description": "Update order illegal status"
			},
			"response": []
		},
		{
			"name": "http://localhost:8080/api/v1/orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dfbad991-a84b-4f12-a818-f0e9c86c9771",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Test orders count\", function () {",
							"    pm.expect(pm.response.json().content.length).to.eql(6);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/v1/orders/customer/1?size=20",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"orders",
						"customer",
						"1"
					],
					"query": [
						{
							"key": "size",
							"value": "20"
						}
					]
				},
				"description": "Get all orders after adding a new one"
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}